//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.util.concurrent
{
    public partial class SynchronousQueue<E> : AbstractQueue<E>, BlockingQueue<E>, global::java.io.Serializable
    {
        public override void clear(){}
        public override bool contains(global::System.Object prm1){return default(bool);}
        public override bool containsAll(Collection<global::System.Object> prm1){return default(bool);}
        public virtual int drainTo(Collection<global::System.Object> prm1, int prm2){return default(int);}
        public virtual int drainTo(Collection<global::System.Object> prm1){return default(int);}
        public override Iterator<E> iterator(){return default(Iterator<E>);}
        public SynchronousQueue(){}
        public SynchronousQueue(bool prm1){}
        public virtual bool offer(E prm1){return default(bool);}
        public virtual bool offer(E prm1, long prm2, TimeUnit prm3){return default(bool);}
        public virtual E peek(){return default(E);}
        public virtual E poll(long prm1, TimeUnit prm2){return default(E);}
        public virtual E poll(){return default(E);}
        public virtual void put(E prm1){}
        public virtual int remainingCapacity(){return default(int);}
        public override bool remove(global::System.Object prm1){return default(bool);}
        public override bool removeAll(Collection<global::System.Object> prm1){return default(bool);}
        public override bool retainAll(Collection<global::System.Object> prm1){return default(bool);}
        public override int size(){return default(int);}
        public virtual E take(){return default(E);}
        public override global::System.Object[] toArray(){return default(global::System.Object[]);}
        public override T[] toArray<T>(T[] prm1){return default(T[]);}
        public bool  IsEmpty { get; private set;}
    }
}
