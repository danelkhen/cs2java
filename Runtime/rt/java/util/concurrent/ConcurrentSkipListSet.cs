//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.util.concurrent
{
    public partial class ConcurrentSkipListSet<E> : AbstractSet<E>, NavigableSet<E>, global::java.lang.Cloneable, global::java.io.Serializable
    {
        public override bool add(E prm1){return default(bool);}
        public virtual E ceiling(E prm1){return default(E);}
        public override void clear(){}
        public virtual ConcurrentSkipListSet<E> clone(){return default(ConcurrentSkipListSet<E>);}
        public virtual Comparator<global::System.Object> comparator(){return default(Comparator<global::System.Object>);}
        public override bool contains(global::System.Object prm1){return default(bool);}
        public virtual Iterator<E> descendingIterator(){return default(Iterator<E>);}
        public virtual NavigableSet<E> descendingSet(){return default(NavigableSet<E>);}
        public override bool equals(global::System.Object prm1){return default(bool);}
        public virtual E first(){return default(E);}
        public virtual E floor(E prm1){return default(E);}
        public virtual NavigableSet<E> headSet(E prm1){return default(NavigableSet<E>);}
        public virtual NavigableSet<E> headSet(E prm1, bool prm2){return default(NavigableSet<E>);}
        SortedSet<E> SortedSet<E>.headSet(E prm1) { return default(SortedSet<E>); }
        public virtual E higher(E prm1){return default(E);}
        public override Iterator<E> iterator(){return default(Iterator<E>);}
        public ConcurrentSkipListSet(SortedSet<E> prm1){}
        public ConcurrentSkipListSet(Collection<E> prm1){}
        public ConcurrentSkipListSet(Comparator<global::System.Object> prm1){}
        public ConcurrentSkipListSet(){}
        public virtual E last(){return default(E);}
        public virtual E lower(E prm1){return default(E);}
        public virtual E pollFirst(){return default(E);}
        public virtual E pollLast(){return default(E);}
        public override bool remove(global::System.Object prm1){return default(bool);}
        public override bool removeAll(Collection<global::System.Object> prm1){return default(bool);}
        public override int size(){return default(int);}
        public virtual NavigableSet<E> subSet(E prm1, bool prm2, E prm3, bool prm4){return default(NavigableSet<E>);}
        public virtual NavigableSet<E> subSet(E prm1, E prm2){return default(NavigableSet<E>);}
        SortedSet<E> SortedSet<E>.subSet(E prm1, E prm2) { return default(SortedSet<E>); }
        public virtual NavigableSet<E> tailSet(E prm1){return default(NavigableSet<E>);}
        public virtual NavigableSet<E> tailSet(E prm1, bool prm2){return default(NavigableSet<E>);}
        SortedSet<E> SortedSet<E>.tailSet(E prm1) { return default(SortedSet<E>); }
        public bool  IsEmpty { get; private set;}
    }
}
