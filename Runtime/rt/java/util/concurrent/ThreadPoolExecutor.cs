//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.util.concurrent
{
    public partial class ThreadPoolExecutor : AbstractExecutorService
    {
        public partial class AbortPolicy : global::java.lang.Object, global::java.util.concurrent.RejectedExecutionHandler
        {
            public AbortPolicy(){}
            public virtual void rejectedExecution(global::java.lang.Runnable prm1, global::java.util.concurrent.ThreadPoolExecutor prm2){}
        }
        public partial class CallerRunsPolicy : global::java.lang.Object, global::java.util.concurrent.RejectedExecutionHandler
        {
            public CallerRunsPolicy(){}
            public virtual void rejectedExecution(global::java.lang.Runnable prm1, global::java.util.concurrent.ThreadPoolExecutor prm2){}
        }
        public partial class DiscardOldestPolicy : global::java.lang.Object, global::java.util.concurrent.RejectedExecutionHandler
        {
            public DiscardOldestPolicy(){}
            public virtual void rejectedExecution(global::java.lang.Runnable prm1, global::java.util.concurrent.ThreadPoolExecutor prm2){}
        }
        public partial class DiscardPolicy : global::java.lang.Object, global::java.util.concurrent.RejectedExecutionHandler
        {
            public DiscardPolicy(){}
            public virtual void rejectedExecution(global::java.lang.Runnable prm1, global::java.util.concurrent.ThreadPoolExecutor prm2){}
        }
        protected virtual void afterExecute(global::java.lang.Runnable prm1, global::java.lang.Throwable prm2){}
        public virtual void allowCoreThreadTimeOut(bool prm1){}
        public virtual bool allowsCoreThreadTimeOut(){return default(bool);}
        public override bool awaitTermination(long prm1, TimeUnit prm2){return default(bool);}
        protected virtual void beforeExecute(global::java.lang.Thread prm1, global::java.lang.Runnable prm2){}
        public override void execute(global::java.lang.Runnable prm1){}
        protected override void finalize(){}
        public virtual long getKeepAliveTime(TimeUnit prm1){return default(long);}
        public ThreadPoolExecutor(int prm1, int prm2, long prm3, TimeUnit prm4, BlockingQueue<global::java.lang.Runnable> prm5, ThreadFactory prm6, RejectedExecutionHandler prm7){}
        public ThreadPoolExecutor(int prm1, int prm2, long prm3, TimeUnit prm4, BlockingQueue<global::java.lang.Runnable> prm5, ThreadFactory prm6){}
        public ThreadPoolExecutor(int prm1, int prm2, long prm3, TimeUnit prm4, BlockingQueue<global::java.lang.Runnable> prm5){}
        public ThreadPoolExecutor(int prm1, int prm2, long prm3, TimeUnit prm4, BlockingQueue<global::java.lang.Runnable> prm5, RejectedExecutionHandler prm6){}
        public virtual int prestartAllCoreThreads(){return default(int);}
        public virtual bool prestartCoreThread(){return default(bool);}
        public virtual void purge(){}
        public virtual bool remove(global::java.lang.Runnable prm1){return default(bool);}
        public virtual void setCorePoolSize(int prm1){}
        public virtual void setKeepAliveTime(long prm1, TimeUnit prm2){}
        public virtual void setMaximumPoolSize(int prm1){}
        public virtual void setRejectedExecutionHandler(RejectedExecutionHandler prm1){}
        public virtual void setThreadFactory(ThreadFactory prm1){}
        public override void shutdown(){}
        public override List<global::java.lang.Runnable> shutdownNow(){return default(List<global::java.lang.Runnable>);}
        protected virtual void terminated(){}
        public override global::java.lang.String toString(){return default(global::java.lang.String);}
        public int  ActiveCount { get; private set;}
        public long  CompletedTaskCount { get; private set;}
        public int  CorePoolSize { get; set;}
        public bool  IsShutdown { get; private set;}
        public bool  IsTerminated { get; private set;}
        public bool  IsTerminating { get; private set;}
        public int  LargestPoolSize { get; private set;}
        public int  MaximumPoolSize { get; set;}
        public int  PoolSize { get; private set;}
        public BlockingQueue<global::java.lang.Runnable>  Queue { get; private set;}
        public RejectedExecutionHandler  RejectedExecutionHandler { get; set;}
        public long  TaskCount { get; private set;}
        public ThreadFactory  ThreadFactory { get; set;}
    }
}
