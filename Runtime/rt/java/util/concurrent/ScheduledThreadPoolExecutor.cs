//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.util.concurrent
{
    public partial class ScheduledThreadPoolExecutor : ThreadPoolExecutor, ScheduledExecutorService
    {
        protected virtual RunnableScheduledFuture<V> decorateTask<V>(Callable<V> prm1, RunnableScheduledFuture<V> prm2){return default(RunnableScheduledFuture<V>);}
        protected virtual RunnableScheduledFuture<V> decorateTask<V>(global::java.lang.Runnable prm1, RunnableScheduledFuture<V> prm2){return default(RunnableScheduledFuture<V>);}
        public override void execute(global::java.lang.Runnable prm1){}
        public ScheduledThreadPoolExecutor(int prm1, ThreadFactory prm2) : base(default(int), default(int), default(long), default(TimeUnit), default(BlockingQueue<global::java.lang.Runnable>), default(ThreadFactory), default(RejectedExecutionHandler)){}
        public ScheduledThreadPoolExecutor(int prm1, RejectedExecutionHandler prm2) : base(default(int), default(int), default(long), default(TimeUnit), default(BlockingQueue<global::java.lang.Runnable>), default(ThreadFactory), default(RejectedExecutionHandler)){}
        public ScheduledThreadPoolExecutor(int prm1, ThreadFactory prm2, RejectedExecutionHandler prm3) : base(default(int), default(int), default(long), default(TimeUnit), default(BlockingQueue<global::java.lang.Runnable>), default(ThreadFactory), default(RejectedExecutionHandler)){}
        public ScheduledThreadPoolExecutor(int prm1) : base(default(int), default(int), default(long), default(TimeUnit), default(BlockingQueue<global::java.lang.Runnable>), default(ThreadFactory), default(RejectedExecutionHandler)){}
        public virtual ScheduledFuture<V> schedule<V>(Callable<V> prm1, long prm2, TimeUnit prm3){return default(ScheduledFuture<V>);}
        public virtual ScheduledFuture<global::System.Object> schedule(global::java.lang.Runnable prm1, long prm2, TimeUnit prm3){return default(ScheduledFuture<global::System.Object>);}
        public virtual ScheduledFuture<global::System.Object> scheduleAtFixedRate(global::java.lang.Runnable prm1, long prm2, long prm3, TimeUnit prm4){return default(ScheduledFuture<global::System.Object>);}
        public virtual ScheduledFuture<global::System.Object> scheduleWithFixedDelay(global::java.lang.Runnable prm1, long prm2, long prm3, TimeUnit prm4){return default(ScheduledFuture<global::System.Object>);}
        public virtual void setContinueExistingPeriodicTasksAfterShutdownPolicy(bool prm1){}
        public virtual void setExecuteExistingDelayedTasksAfterShutdownPolicy(bool prm1){}
        public virtual void setRemoveOnCancelPolicy(bool prm1){}
        public override void shutdown(){}
        public override List<global::java.lang.Runnable> shutdownNow(){return default(List<global::java.lang.Runnable>);}
        public override Future<global::System.Object> submit(global::java.lang.Runnable prm1){return default(Future<global::System.Object>);}
        public override Future<T> submit<T>(global::java.lang.Runnable prm1, T prm2){return default(Future<T>);}
        public override Future<T> submit<T>(Callable<T> prm1){return default(Future<T>);}
        public bool  ContinueExistingPeriodicTasksAfterShutdownPolicy { get; set;}
        public bool  ExecuteExistingDelayedTasksAfterShutdownPolicy { get; set;}
        public BlockingQueue<global::java.lang.Runnable>  Queue { get; private set;}
        public bool  RemoveOnCancelPolicy { get; set;}
    }
}
