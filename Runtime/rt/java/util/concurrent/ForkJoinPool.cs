//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.util.concurrent
{
    public partial class ForkJoinPool : AbstractExecutorService
    {
        public partial interface ForkJoinWorkerThreadFactory
        {
            global::java.util.concurrent.ForkJoinWorkerThread newThread(global::java.util.concurrent.ForkJoinPool prm1);
        }
        public partial interface ManagedBlocker
        {
            bool block();
            bool  IsReleasable { get;}
        }
        public static ForkJoinPool.ForkJoinWorkerThreadFactory defaultForkJoinWorkerThreadFactory;
        public override bool awaitTermination(long prm1, TimeUnit prm2){return default(bool);}
        protected virtual int drainTasksTo(Collection<global::System.Object> prm1){return default(int);}
        public override void execute(global::java.lang.Runnable prm1){}
        public virtual void execute(ForkJoinTask<global::System.Object> prm1){}
        public virtual bool hasQueuedSubmissions(){return default(bool);}
        public virtual T invoke<T>(ForkJoinTask<T> prm1){return default(T);}
        public override List<Future<T>> invokeAll<T>(Collection<Callable<T>> prm1){return default(List<Future<T>>);}
        public ForkJoinPool(){}
        public ForkJoinPool(int prm1, ForkJoinPool.ForkJoinWorkerThreadFactory prm2, global::java.lang.Thread.UncaughtExceptionHandler prm3, bool prm4){}
        public ForkJoinPool(int prm1){}
        public static void managedBlock(ForkJoinPool.ManagedBlocker prm1){}
        protected override RunnableFuture<T> newTaskFor<T>(global::java.lang.Runnable prm1, T prm2){return default(RunnableFuture<T>);}
        protected override RunnableFuture<T> newTaskFor<T>(Callable<T> prm1){return default(RunnableFuture<T>);}
        protected virtual ForkJoinTask<global::System.Object> pollSubmission(){return default(ForkJoinTask<global::System.Object>);}
        public override void shutdown(){}
        public override List<global::java.lang.Runnable> shutdownNow(){return default(List<global::java.lang.Runnable>);}
        public virtual ForkJoinTask<T> submit<T>(global::java.lang.Runnable prm1, T prm2){return default(ForkJoinTask<T>);}
        public virtual ForkJoinTask<T> submit<T>(ForkJoinTask<T> prm1){return default(ForkJoinTask<T>);}
        public virtual ForkJoinTask<T> submit<T>(Callable<T> prm1){return default(ForkJoinTask<T>);}
        public virtual ForkJoinTask<global::System.Object> submit(global::java.lang.Runnable prm1){return default(ForkJoinTask<global::System.Object>);}
        public override global::java.lang.String toString(){return default(global::java.lang.String);}
        public int  ActiveThreadCount { get; private set;}
        public bool  AsyncMode { get; private set;}
        public ForkJoinPool.ForkJoinWorkerThreadFactory  Factory { get; private set;}
        public bool  IsQuiescent { get; private set;}
        public bool  IsShutdown { get; private set;}
        public bool  IsTerminated { get; private set;}
        public bool  IsTerminating { get; private set;}
        public int  Parallelism { get; private set;}
        public int  PoolSize { get; private set;}
        public int  QueuedSubmissionCount { get; private set;}
        public long  QueuedTaskCount { get; private set;}
        public int  RunningThreadCount { get; private set;}
        public long  StealCount { get; private set;}
        public global::java.lang.Thread.UncaughtExceptionHandler  UncaughtExceptionHandler { get; private set;}
    }
}
