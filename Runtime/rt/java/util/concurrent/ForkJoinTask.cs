//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.util.concurrent
{
    public abstract partial class ForkJoinTask<V> : global::java.lang.Object, Future<V>, global::java.io.Serializable
    {
        public static ForkJoinTask<T> adapt<T>(Callable<T> prm1){return default(ForkJoinTask<T>);}
        public static ForkJoinTask<T> adapt<T>(global::java.lang.Runnable prm1, T prm2){return default(ForkJoinTask<T>);}
        public static ForkJoinTask<global::System.Object> adapt(global::java.lang.Runnable prm1){return default(ForkJoinTask<global::System.Object>);}
        public virtual bool cancel(bool prm1){return default(bool);}
        public virtual void complete(V prm1){}
        public virtual void completeExceptionally(global::java.lang.Throwable prm1){}
        protected virtual bool exec(){return default(bool);}
        public ForkJoinTask<V> fork(){return default(ForkJoinTask<V>);}
        public V get(){return default(V);}
        public V get(long prm1, TimeUnit prm2){return default(V);}
        public static void helpQuiesce(){}
        public static bool inForkJoinPool(){return default(bool);}
        public V invoke(){return default(V);}
        public static void invokeAll(ForkJoinTask<global::System.Object>[] prm1){}
        public static void invokeAll(ForkJoinTask<global::System.Object> prm1, ForkJoinTask<global::System.Object> prm2){}
        public static Collection<T> invokeAll<T>(Collection<T> prm1){return default(Collection<T>);}
        public ForkJoinTask(){}
        public V join(){return default(V);}
        protected static ForkJoinTask<global::System.Object> peekNextLocalTask(){return default(ForkJoinTask<global::System.Object>);}
        protected static ForkJoinTask<global::System.Object> pollNextLocalTask(){return default(ForkJoinTask<global::System.Object>);}
        protected static ForkJoinTask<global::System.Object> pollTask(){return default(ForkJoinTask<global::System.Object>);}
        public void quietlyInvoke(){}
        public void quietlyJoin(){}
        public virtual void reinitialize(){}
        protected virtual void setRawResult(V prm1){}
        public virtual bool tryUnfork(){return default(bool);}
        public global::java.lang.Throwable  Exception { get; private set;}
        public bool  IsCancelled { get; private set;}
        public bool  IsCompletedAbnormally { get; private set;}
        public bool  IsCompletedNormally { get; private set;}
        public bool  IsDone { get; private set;}
        public ForkJoinPool  Pool { get; private set;}
        public int  QueuedTaskCount { get; private set;}
        public V  RawResult { get; set;}
        public int  SurplusQueuedTaskCount { get; private set;}
    }
}
