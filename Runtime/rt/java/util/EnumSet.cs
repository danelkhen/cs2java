//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.util
{
    public abstract partial class EnumSet<E> : AbstractSet<E>, global::java.lang.Cloneable, global::java.io.Serializable
    {
        public EnumSet(){}
        public static EnumSet<E> allOf<E>(global::java.lang.Class<E> prm1){return default(EnumSet<E>);}
        public virtual EnumSet<E> clone(){return default(EnumSet<E>);}
        public static EnumSet<E> complementOf<E>(EnumSet<E> prm1){return default(EnumSet<E>);}
        public static EnumSet<E> copyOf<E>(EnumSet<E> prm1){return default(EnumSet<E>);}
        public static EnumSet<E> copyOf<E>(Collection<E> prm1){return default(EnumSet<E>);}
        public static EnumSet<E> noneOf<E>(global::java.lang.Class<E> prm1){return default(EnumSet<E>);}
        public static EnumSet<E> of<E>(E prm1, E prm2, E prm3, E prm4){return default(EnumSet<E>);}
        public static EnumSet<E> of<E>(E prm1, E prm2, E prm3, E prm4, E prm5){return default(EnumSet<E>);}
        public static EnumSet<E> of<E>(E prm1, E[] prm2){return default(EnumSet<E>);}
        public static EnumSet<E> of<E>(E prm1){return default(EnumSet<E>);}
        public static EnumSet<E> of<E>(E prm1, E prm2){return default(EnumSet<E>);}
        public static EnumSet<E> of<E>(E prm1, E prm2, E prm3){return default(EnumSet<E>);}
        public static EnumSet<E> range<E>(E prm1, E prm2){return default(EnumSet<E>);}
    }
}
