//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.net
{
    internal abstract partial class AbstractPlainSocketImpl : SocketImpl
    {
        public bool closePending;
        public global::System.Object fdLock;
        public int fdUseCount;
        public static int SHUT_RD;
        public static int SHUT_WR;
        public bool stream;
        public AbstractPlainSocketImpl(){}
        protected override void accept(SocketImpl prm1){}
        protected override int available(){return default(int);}
        protected override void bind(InetAddress prm1, int prm2){}
        protected override void close(){}
        protected override void connect(InetAddress prm1, int prm2){}
        protected override void connect(SocketAddress prm1, int prm2){}
        protected override void connect(global::java.lang.String prm1, int prm2){}
        protected override void create(bool prm1){}
        protected override void finalize(){}
        public override global::System.Object getOption(int prm1){return default(global::System.Object);}
        protected override void listen(int prm1){}
        protected override void sendUrgentData(int prm1){}
        public virtual void setConnectionReset(){}
        public virtual void setConnectionResetPending(){}
        public override void setOption(int prm1, global::System.Object prm2){}
        protected override void shutdownInput(){}
        protected override void shutdownOutput(){}
        protected virtual void socketClose(){}
        protected override bool supportsUrgentData(){return default(bool);}
        public global::java.io.InputStream  InputStream { get; private set;}
        public bool  IsClosedOrPending { get; private set;}
        public bool  IsConnectionReset { get; private set;}
        public bool  IsConnectionResetPending { get; private set;}
        public global::java.io.OutputStream  OutputStream { get; private set;}
        public int  Timeout { get; private set;}
    }
}
