//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.nio.channels
{
    public abstract partial class AsynchronousFileChannel : global::java.lang.Object, AsynchronousChannel
    {
        public virtual void close(){}
        public virtual void force(bool prm1){}
        public AsynchronousFileChannel(){}
        public virtual global::java.util.concurrent.Future<FileLock> @lock(long prm1, long prm2, bool prm3){return default(global::java.util.concurrent.Future<FileLock>);}
        public void @lock<A>(A prm1, CompletionHandler<FileLock,global::System.Object> prm2){}
        public virtual void @lock<A>(long prm1, long prm2, bool prm3, A prm4, CompletionHandler<FileLock,global::System.Object> prm5){}
        public global::java.util.concurrent.Future<FileLock> @lock(){return default(global::java.util.concurrent.Future<FileLock>);}
        public static AsynchronousFileChannel open(global::java.nio.file.Path prm1, global::java.nio.file.OpenOption[] prm2){return default(AsynchronousFileChannel);}
        public static AsynchronousFileChannel open(global::java.nio.file.Path prm1, global::java.util.Set<global::java.nio.file.OpenOption> prm2, global::java.util.concurrent.ExecutorService prm3, global::java.nio.file.attribute.FileAttribute<global::System.Object>[] prm4){return default(AsynchronousFileChannel);}
        public virtual global::java.util.concurrent.Future<global::java.lang.Integer> read(ByteBuffer prm1, long prm2){return default(global::java.util.concurrent.Future<global::java.lang.Integer>);}
        public virtual void read<A>(ByteBuffer prm1, long prm2, A prm3, CompletionHandler<global::java.lang.Integer,global::System.Object> prm4){}
        public virtual long size(){return default(long);}
        public virtual AsynchronousFileChannel truncate(long prm1){return default(AsynchronousFileChannel);}
        public FileLock tryLock(){return default(FileLock);}
        public virtual FileLock tryLock(long prm1, long prm2, bool prm3){return default(FileLock);}
        public virtual void write<A>(ByteBuffer prm1, long prm2, A prm3, CompletionHandler<global::java.lang.Integer,global::System.Object> prm4){}
        public virtual global::java.util.concurrent.Future<global::java.lang.Integer> write(ByteBuffer prm1, long prm2){return default(global::java.util.concurrent.Future<global::java.lang.Integer>);}
        public bool  IsOpen { get; private set;}
    }
}
