//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.nio.channels
{
    public abstract partial class FileChannel : global::java.nio.channels.spi.AbstractInterruptibleChannel, SeekableByteChannel, GatheringByteChannel, ScatteringByteChannel
    {
        public partial class MapMode : global::java.lang.Object
        {
            public static global::java.nio.channels.FileChannel.MapMode PRIVATE;
            public static global::java.nio.channels.FileChannel.MapMode READ_ONLY;
            public static global::java.nio.channels.FileChannel.MapMode READ_WRITE;
            public MapMode(){}
            public override global::java.lang.String toString(){return default(global::java.lang.String);}
        }
        public virtual void force(bool prm1){}
        public FileChannel(){}
        public virtual FileLock @lock(long prm1, long prm2, bool prm3){return default(FileLock);}
        public FileLock @lock(){return default(FileLock);}
        public virtual MappedByteBuffer map(FileChannel.MapMode prm1, long prm2, long prm3){return default(MappedByteBuffer);}
        public static FileChannel open(global::java.nio.file.Path prm1, global::java.util.Set<global::java.nio.file.OpenOption> prm2, global::java.nio.file.attribute.FileAttribute<global::System.Object>[] prm3){return default(FileChannel);}
        public static FileChannel open(global::java.nio.file.Path prm1, global::java.nio.file.OpenOption[] prm2){return default(FileChannel);}
        public virtual long position(){return default(long);}
        public virtual FileChannel position(long prm1){return default(FileChannel);}
        SeekableByteChannel SeekableByteChannel.position(long prm1){return default(SeekableByteChannel);}
        public virtual int read(ByteBuffer prm1){return default(int);}
        public virtual long read(ByteBuffer[] prm1, int prm2, int prm3){return default(long);}
        public long read(ByteBuffer[] prm1){return default(long);}
        public virtual int read(ByteBuffer prm1, long prm2){return default(int);}
        public virtual long size(){return default(long);}
        public virtual long transferFrom(ReadableByteChannel prm1, long prm2, long prm3){return default(long);}
        public virtual long transferTo(long prm1, long prm2, WritableByteChannel prm3){return default(long);}
        public virtual FileChannel truncate(long prm1){return default(FileChannel);}
        SeekableByteChannel SeekableByteChannel.truncate(long prm1){return default(SeekableByteChannel);}
        public virtual FileLock tryLock(long prm1, long prm2, bool prm3){return default(FileLock);}
        public FileLock tryLock(){return default(FileLock);}
        public long write(ByteBuffer[] prm1){return default(long);}
        public virtual int write(ByteBuffer prm1, long prm2){return default(int);}
        public virtual int write(ByteBuffer prm1){return default(int);}
        public virtual long write(ByteBuffer[] prm1, int prm2, int prm3){return default(long);}
    }
}
