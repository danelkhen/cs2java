//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.nio
{
    internal partial class DirectLongBufferS : LongBuffer, global::sun.nio.ch.DirectBuffer
    {
        public static bool unaligned;
        public static global::sun.misc.Unsafe @unsafe;
        public DirectLongBufferS(){}
        public virtual long address(){return default(long);}
        public override LongBuffer asReadOnlyBuffer(){return default(LongBuffer);}
        public virtual global::System.Object attachment(){return default(global::System.Object);}
        public virtual global::sun.misc.Cleaner cleaner(){return default(global::sun.misc.Cleaner);}
        public override LongBuffer compact(){return default(LongBuffer);}
        public override LongBuffer duplicate(){return default(LongBuffer);}
        public override LongBuffer get(long[] prm1, int prm2, int prm3){return default(LongBuffer);}
        public override long get(int prm1){return default(long);}
        public override long get(){return default(long);}
        public override ByteOrder order(){return default(ByteOrder);}
        public override LongBuffer put(long[] prm1, int prm2, int prm3){return default(LongBuffer);}
        public override LongBuffer put(LongBuffer prm1){return default(LongBuffer);}
        public override LongBuffer put(long prm1){return default(LongBuffer);}
        public override LongBuffer put(int prm1, long prm2){return default(LongBuffer);}
        public override LongBuffer slice(){return default(LongBuffer);}
        public bool  IsDirect { get; private set;}
        public bool  IsReadOnly { get; private set;}
    }
}
