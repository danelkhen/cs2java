//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.nio
{
    public abstract partial class ByteBuffer : Buffer, global::java.lang.Comparable<ByteBuffer>
    {
        public ByteBuffer(){}
        public static ByteBuffer allocate(int prm1){return default(ByteBuffer);}
        public static ByteBuffer allocateDirect(int prm1){return default(ByteBuffer);}
        public byte[] array(){return default(byte[]);}
        public int arrayOffset(){return default(int);}
        public virtual CharBuffer asCharBuffer(){return default(CharBuffer);}
        public virtual DoubleBuffer asDoubleBuffer(){return default(DoubleBuffer);}
        public virtual FloatBuffer asFloatBuffer(){return default(FloatBuffer);}
        public virtual IntBuffer asIntBuffer(){return default(IntBuffer);}
        public virtual LongBuffer asLongBuffer(){return default(LongBuffer);}
        public virtual ByteBuffer asReadOnlyBuffer(){return default(ByteBuffer);}
        public virtual ShortBuffer asShortBuffer(){return default(ShortBuffer);}
        public virtual ByteBuffer compact(){return default(ByteBuffer);}
        public virtual int compareTo(ByteBuffer prm1){return default(int);}
        public virtual ByteBuffer duplicate(){return default(ByteBuffer);}
        public override bool equals(global::System.Object prm1){return default(bool);}
        public virtual byte get(int prm1){return default(byte);}
        public virtual ByteBuffer get(byte[] prm1, int prm2, int prm3){return default(ByteBuffer);}
        public virtual byte get(){return default(byte);}
        public virtual ByteBuffer get(byte[] prm1){return default(ByteBuffer);}
        public virtual char getChar(int prm1){return default(char);}
        public virtual double getDouble(int prm1){return default(double);}
        public virtual float getFloat(int prm1){return default(float);}
        public virtual int getInt(int prm1){return default(int);}
        public virtual long getLong(int prm1){return default(long);}
        public virtual short getShort(int prm1){return default(short);}
        public bool hasArray(){return default(bool);}
        public override int hashCode(){return default(int);}
        public ByteBuffer order(ByteOrder prm1){return default(ByteBuffer);}
        public ByteOrder order(){return default(ByteOrder);}
        public virtual ByteBuffer put(byte[] prm1, int prm2, int prm3){return default(ByteBuffer);}
        public virtual ByteBuffer put(byte prm1){return default(ByteBuffer);}
        public virtual ByteBuffer put(ByteBuffer prm1){return default(ByteBuffer);}
        public virtual ByteBuffer put(int prm1, byte prm2){return default(ByteBuffer);}
        public ByteBuffer put(byte[] prm1){return default(ByteBuffer);}
        public virtual ByteBuffer putChar(char prm1){return default(ByteBuffer);}
        public virtual ByteBuffer putChar(int prm1, char prm2){return default(ByteBuffer);}
        public virtual ByteBuffer putDouble(double prm1){return default(ByteBuffer);}
        public virtual ByteBuffer putDouble(int prm1, double prm2){return default(ByteBuffer);}
        public virtual ByteBuffer putFloat(float prm1){return default(ByteBuffer);}
        public virtual ByteBuffer putFloat(int prm1, float prm2){return default(ByteBuffer);}
        public virtual ByteBuffer putInt(int prm1, int prm2){return default(ByteBuffer);}
        public virtual ByteBuffer putInt(int prm1){return default(ByteBuffer);}
        public virtual ByteBuffer putLong(int prm1, long prm2){return default(ByteBuffer);}
        public virtual ByteBuffer putLong(long prm1){return default(ByteBuffer);}
        public virtual ByteBuffer putShort(short prm1){return default(ByteBuffer);}
        public virtual ByteBuffer putShort(int prm1, short prm2){return default(ByteBuffer);}
        public virtual ByteBuffer slice(){return default(ByteBuffer);}
        public override global::java.lang.String toString(){return default(global::java.lang.String);}
        public static ByteBuffer wrap(byte[] prm1, int prm2, int prm3){return default(ByteBuffer);}
        public static ByteBuffer wrap(byte[] prm1){return default(ByteBuffer);}
        public char  Char { get; private set;}
        public double  Double { get; private set;}
        public float  Float { get; private set;}
        public int  Int { get; private set;}
        public bool  IsDirect { get; private set;}
        public long  Long { get; private set;}
        public short  Short { get; private set;}
    }
}
