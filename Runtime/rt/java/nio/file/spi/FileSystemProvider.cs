//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.nio.file.spi
{
    public abstract partial class FileSystemProvider : global::java.lang.Object
    {
        public virtual void checkAccess(Path prm1, AccessMode[] prm2){}
        public virtual void copy(Path prm1, Path prm2, CopyOption[] prm3){}
        public virtual void createDirectory(Path prm1, global::java.nio.file.attribute.FileAttribute<global::System.Object>[] prm2){}
        public virtual void createLink(Path prm1, Path prm2){}
        public virtual void createSymbolicLink(Path prm1, Path prm2, global::java.nio.file.attribute.FileAttribute<global::System.Object>[] prm3){}
        public virtual void delete(Path prm1){}
        public virtual bool deleteIfExists(Path prm1){return default(bool);}
        public virtual V getFileAttributeView<V>(Path prm1, global::java.lang.Class<V> prm2, LinkOption[] prm3){return default(V);}
        public virtual FileStore getFileStore(Path prm1){return default(FileStore);}
        public virtual global::java.nio.file.FileSystem getFileSystem(global::java.net.URI prm1){return default(global::java.nio.file.FileSystem);}
        public virtual Path getPath(global::java.net.URI prm1){return default(Path);}
        public static global::java.util.List<FileSystemProvider> installedProviders(){return default(global::java.util.List<FileSystemProvider>);}
        public virtual bool isHidden(Path prm1){return default(bool);}
        public virtual bool isSameFile(Path prm1, Path prm2){return default(bool);}
        public FileSystemProvider(){}
        public virtual void move(Path prm1, Path prm2, CopyOption[] prm3){}
        public virtual global::java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(Path prm1, global::java.util.Set<OpenOption> prm2, global::java.util.concurrent.ExecutorService prm3, global::java.nio.file.attribute.FileAttribute<global::System.Object>[] prm4){return default(global::java.nio.channels.AsynchronousFileChannel);}
        public virtual global::java.nio.channels.SeekableByteChannel newByteChannel(Path prm1, global::java.util.Set<OpenOption> prm2, global::java.nio.file.attribute.FileAttribute<global::System.Object>[] prm3){return default(global::java.nio.channels.SeekableByteChannel);}
        public virtual DirectoryStream<Path> newDirectoryStream(Path prm1, DirectoryStream_Filter<global::System.Object> prm2){return default(DirectoryStream<Path>);}
        public virtual global::java.nio.channels.FileChannel newFileChannel(Path prm1, global::java.util.Set<OpenOption> prm2, global::java.nio.file.attribute.FileAttribute<global::System.Object>[] prm3){return default(global::java.nio.channels.FileChannel);}
        public virtual global::java.nio.file.FileSystem newFileSystem(global::java.net.URI prm1, global::java.util.Map<global::java.lang.String,global::System.Object> prm2){return default(global::java.nio.file.FileSystem);}
        public virtual global::java.nio.file.FileSystem newFileSystem(Path prm1, global::java.util.Map<global::java.lang.String,global::System.Object> prm2){return default(global::java.nio.file.FileSystem);}
        public virtual global::java.io.InputStream newInputStream(Path prm1, OpenOption[] prm2){return default(global::java.io.InputStream);}
        public virtual global::java.io.OutputStream newOutputStream(Path prm1, OpenOption[] prm2){return default(global::java.io.OutputStream);}
        public virtual A readAttributes<A>(Path prm1, global::java.lang.Class<A> prm2, LinkOption[] prm3){return default(A);}
        public virtual global::java.util.Map<global::java.lang.String,global::System.Object> readAttributes(Path prm1, global::java.lang.String prm2, LinkOption[] prm3){return default(global::java.util.Map<global::java.lang.String,global::System.Object>);}
        public virtual Path readSymbolicLink(Path prm1){return default(Path);}
        public virtual void setAttribute(Path prm1, global::java.lang.String prm2, global::System.Object prm3, LinkOption[] prm4){}
        public global::java.lang.String  Scheme { get; private set;}
    }
}
