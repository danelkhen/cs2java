//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.nio
{
    public abstract partial class IntBuffer : Buffer, global::java.lang.Comparable<IntBuffer>
    {
        public IntBuffer(){}
        public static IntBuffer allocate(int prm1){return default(IntBuffer);}
        public int[] array(){return default(int[]);}
        public int arrayOffset(){return default(int);}
        public virtual IntBuffer asReadOnlyBuffer(){return default(IntBuffer);}
        public virtual IntBuffer compact(){return default(IntBuffer);}
        public virtual int compareTo(IntBuffer prm1){return default(int);}
        public virtual IntBuffer duplicate(){return default(IntBuffer);}
        public override bool equals(global::System.Object prm1){return default(bool);}
        public virtual IntBuffer get(int[] prm1, int prm2, int prm3){return default(IntBuffer);}
        public virtual IntBuffer get(int[] prm1){return default(IntBuffer);}
        public virtual int get(){return default(int);}
        public virtual int get(int prm1){return default(int);}
        public bool hasArray(){return default(bool);}
        public override int hashCode(){return default(int);}
        public virtual ByteOrder order(){return default(ByteOrder);}
        public IntBuffer put(int[] prm1){return default(IntBuffer);}
        public virtual IntBuffer put(int[] prm1, int prm2, int prm3){return default(IntBuffer);}
        public virtual IntBuffer put(int prm1, int prm2){return default(IntBuffer);}
        public virtual IntBuffer put(IntBuffer prm1){return default(IntBuffer);}
        public virtual IntBuffer put(int prm1){return default(IntBuffer);}
        public virtual IntBuffer slice(){return default(IntBuffer);}
        public override global::java.lang.String toString(){return default(global::java.lang.String);}
        public static IntBuffer wrap(int[] prm1, int prm2, int prm3){return default(IntBuffer);}
        public static IntBuffer wrap(int[] prm1){return default(IntBuffer);}
        public bool  IsDirect { get; private set;}
    }
}
