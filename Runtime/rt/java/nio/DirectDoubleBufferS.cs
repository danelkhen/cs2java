//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.nio
{
    internal partial class DirectDoubleBufferS : DoubleBuffer, global::sun.nio.ch.DirectBuffer
    {
        public static bool unaligned;
        public static global::sun.misc.Unsafe @unsafe;
        public DirectDoubleBufferS(){}
        public virtual long address(){return default(long);}
        public override DoubleBuffer asReadOnlyBuffer(){return default(DoubleBuffer);}
        public virtual global::System.Object attachment(){return default(global::System.Object);}
        public virtual global::sun.misc.Cleaner cleaner(){return default(global::sun.misc.Cleaner);}
        public override DoubleBuffer compact(){return default(DoubleBuffer);}
        public override DoubleBuffer duplicate(){return default(DoubleBuffer);}
        public override DoubleBuffer get(double[] prm1, int prm2, int prm3){return default(DoubleBuffer);}
        public override double get(int prm1){return default(double);}
        public override double get(){return default(double);}
        public override ByteOrder order(){return default(ByteOrder);}
        public override DoubleBuffer put(double[] prm1, int prm2, int prm3){return default(DoubleBuffer);}
        public override DoubleBuffer put(DoubleBuffer prm1){return default(DoubleBuffer);}
        public override DoubleBuffer put(double prm1){return default(DoubleBuffer);}
        public override DoubleBuffer put(int prm1, double prm2){return default(DoubleBuffer);}
        public override DoubleBuffer slice(){return default(DoubleBuffer);}
        public bool  IsDirect { get; private set;}
        public bool  IsReadOnly { get; private set;}
    }
}
