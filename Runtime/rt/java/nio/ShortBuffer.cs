//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.nio
{
    public abstract partial class ShortBuffer : Buffer, global::java.lang.Comparable<ShortBuffer>
    {
        public ShortBuffer(){}
        public static ShortBuffer allocate(int prm1){return default(ShortBuffer);}
        public short[] array(){return default(short[]);}
        public int arrayOffset(){return default(int);}
        public virtual ShortBuffer asReadOnlyBuffer(){return default(ShortBuffer);}
        public virtual ShortBuffer compact(){return default(ShortBuffer);}
        public virtual int compareTo(ShortBuffer prm1){return default(int);}
        public virtual ShortBuffer duplicate(){return default(ShortBuffer);}
        public override bool equals(global::System.Object prm1){return default(bool);}
        public virtual ShortBuffer get(short[] prm1, int prm2, int prm3){return default(ShortBuffer);}
        public virtual ShortBuffer get(short[] prm1){return default(ShortBuffer);}
        public virtual short get(){return default(short);}
        public virtual short get(int prm1){return default(short);}
        public bool hasArray(){return default(bool);}
        public override int hashCode(){return default(int);}
        public virtual ByteOrder order(){return default(ByteOrder);}
        public ShortBuffer put(short[] prm1){return default(ShortBuffer);}
        public virtual ShortBuffer put(short[] prm1, int prm2, int prm3){return default(ShortBuffer);}
        public virtual ShortBuffer put(int prm1, short prm2){return default(ShortBuffer);}
        public virtual ShortBuffer put(ShortBuffer prm1){return default(ShortBuffer);}
        public virtual ShortBuffer put(short prm1){return default(ShortBuffer);}
        public virtual ShortBuffer slice(){return default(ShortBuffer);}
        public override global::java.lang.String toString(){return default(global::java.lang.String);}
        public static ShortBuffer wrap(short[] prm1, int prm2, int prm3){return default(ShortBuffer);}
        public static ShortBuffer wrap(short[] prm1){return default(ShortBuffer);}
        public bool  IsDirect { get; private set;}
    }
}
