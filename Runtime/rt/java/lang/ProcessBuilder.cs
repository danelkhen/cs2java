//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.lang
{
    public partial class ProcessBuilder : Object
    {
        public abstract partial class Redirect : global::java.lang.Object
        {
            public partial class Type : global::java.lang.Enum<global::java.lang.ProcessBuilder.Redirect>
            {
                public static global::java.lang.ProcessBuilder.Redirect APPEND;
                public static global::java.lang.ProcessBuilder.Redirect INHERIT;
                public static global::java.lang.ProcessBuilder.Redirect PIPE;
                public static global::java.lang.ProcessBuilder.Redirect READ;
                public static global::java.lang.ProcessBuilder.Redirect WRITE;
                public Type(){}
                public static global::java.lang.ProcessBuilder.Redirect valueOf(global::java.lang.String prm1){return default(global::java.lang.ProcessBuilder.Redirect);}
                public static global::java.lang.ProcessBuilder.Redirect[] values(){return default(global::java.lang.ProcessBuilder.Redirect[]);}
            }
            public static global::java.lang.ProcessBuilder.Redirect INHERIT;
            public static global::java.lang.ProcessBuilder.Redirect PIPE;
            public Redirect(){}
            public static global::java.lang.ProcessBuilder.Redirect appendTo(global::java.io.File prm1){return default(global::java.lang.ProcessBuilder.Redirect);}
            public override bool equals(global::System.Object prm1){return default(bool);}
            public virtual global::java.io.File file(){return default(global::java.io.File);}
            public static global::java.lang.ProcessBuilder.Redirect from(global::java.io.File prm1){return default(global::java.lang.ProcessBuilder.Redirect);}
            public override int hashCode(){return default(int);}
            public static global::java.lang.ProcessBuilder.Redirect to(global::java.io.File prm1){return default(global::java.lang.ProcessBuilder.Redirect);}
            public virtual global::java.lang.ProcessBuilder.Redirect type(){return default(global::java.lang.ProcessBuilder.Redirect);}
        }
        public virtual ProcessBuilder command(global::java.util.List<String> prm1){return default(ProcessBuilder);}
        public virtual ProcessBuilder command(String[] prm1){return default(ProcessBuilder);}
        public virtual global::java.util.List<String> command(){return default(global::java.util.List<String>);}
        public virtual global::java.io.File directory(){return default(global::java.io.File);}
        public virtual ProcessBuilder directory(global::java.io.File prm1){return default(ProcessBuilder);}
        public virtual global::java.util.Map<String,String> environment(){return default(global::java.util.Map<String,String>);}
        public virtual ProcessBuilder inheritIO(){return default(ProcessBuilder);}
        public ProcessBuilder(global::java.util.List<String> prm1){}
        public ProcessBuilder(String[] prm1){}
        public virtual ProcessBuilder redirectError(ProcessBuilder.Redirect prm1){return default(ProcessBuilder);}
        public virtual ProcessBuilder redirectError(global::java.io.File prm1){return default(ProcessBuilder);}
        public virtual ProcessBuilder.Redirect redirectError(){return default(ProcessBuilder.Redirect);}
        public virtual bool redirectErrorStream(){return default(bool);}
        public virtual ProcessBuilder redirectErrorStream(bool prm1){return default(ProcessBuilder);}
        public virtual ProcessBuilder redirectInput(global::java.io.File prm1){return default(ProcessBuilder);}
        public virtual ProcessBuilder redirectInput(ProcessBuilder.Redirect prm1){return default(ProcessBuilder);}
        public virtual ProcessBuilder.Redirect redirectInput(){return default(ProcessBuilder.Redirect);}
        public virtual ProcessBuilder redirectOutput(global::java.io.File prm1){return default(ProcessBuilder);}
        public virtual ProcessBuilder.Redirect redirectOutput(){return default(ProcessBuilder.Redirect);}
        public virtual ProcessBuilder redirectOutput(ProcessBuilder.Redirect prm1){return default(ProcessBuilder);}
        public virtual Process start(){return default(Process);}
    }
}
