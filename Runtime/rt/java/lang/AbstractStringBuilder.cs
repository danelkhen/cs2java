//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.lang
{
    public abstract partial class AbstractStringBuilder : Object, Appendable, CharSequence
    {
        public AbstractStringBuilder(){}
        public virtual AbstractStringBuilder append(char[] prm1, int prm2, int prm3){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(char[] prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(bool prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(char prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(String prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(StringBuffer prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(CharSequence prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(CharSequence prm1, int prm2, int prm3){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(double prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(float prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(long prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(int prm1){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder append(global::System.Object prm1){return default(AbstractStringBuilder);}
        Appendable Appendable.append(CharSequence prm1){return default(Appendable);}
        Appendable Appendable.append(CharSequence prm1, int prm2, int prm3){return default(Appendable);}
        Appendable Appendable.append(char prm1){return default(Appendable);}
        public virtual AbstractStringBuilder appendCodePoint(int prm1){return default(AbstractStringBuilder);}
        public virtual int capacity(){return default(int);}
        public virtual char charAt(int prm1){return default(char);}
        public virtual int codePointAt(int prm1){return default(int);}
        public virtual int codePointBefore(int prm1){return default(int);}
        public virtual int codePointCount(int prm1, int prm2){return default(int);}
        public virtual AbstractStringBuilder delete(int prm1, int prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder deleteCharAt(int prm1){return default(AbstractStringBuilder);}
        public virtual void ensureCapacity(int prm1){}
        public virtual void getChars(int prm1, int prm2, char[] prm3, int prm4){}
        public virtual int indexOf(String prm1){return default(int);}
        public virtual int indexOf(String prm1, int prm2){return default(int);}
        public virtual AbstractStringBuilder insert(int prm1, long prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, int prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, char prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, float prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, double prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, String prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, global::System.Object prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, char[] prm2, int prm3, int prm4){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, char[] prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, bool prm2){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, CharSequence prm2, int prm3, int prm4){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder insert(int prm1, CharSequence prm2){return default(AbstractStringBuilder);}
        public virtual int lastIndexOf(String prm1){return default(int);}
        public virtual int lastIndexOf(String prm1, int prm2){return default(int);}
        public virtual int length(){return default(int);}
        public virtual int offsetByCodePoints(int prm1, int prm2){return default(int);}
        public virtual AbstractStringBuilder replace(int prm1, int prm2, String prm3){return default(AbstractStringBuilder);}
        public virtual AbstractStringBuilder reverse(){return default(AbstractStringBuilder);}
        public virtual void setCharAt(int prm1, char prm2){}
        public virtual void setLength(int prm1){}
        public virtual CharSequence subSequence(int prm1, int prm2){return default(CharSequence);}
        public virtual String substring(int prm1, int prm2){return default(String);}
        public virtual String substring(int prm1){return default(String);}
        public override String toString(){return default(String);}
        public virtual void trimToSize(){}
    }
}
