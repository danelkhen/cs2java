//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.lang
{
    public partial class Class<T> : Object, global::java.io.Serializable, global::java.lang.reflect.GenericDeclaration, global::java.lang.reflect.Type, global::java.lang.reflect.AnnotatedElement
    {
        public Class(){}
        public virtual Class<U> asSubclass<U>(Class<U> prm1){return default(Class<U>);}
        public virtual T cast(global::System.Object prm1){return default(T);}
        public virtual bool desiredAssertionStatus(){return default(bool);}
        public static Class<global::System.Object> forName(String prm1){return default(Class<global::System.Object>);}
        public static Class<global::System.Object> forName(String prm1, bool prm2, ClassLoader prm3){return default(Class<global::System.Object>);}
        public virtual A getAnnotation<A>(Class<A> prm1){return default(A);}
        public virtual global::java.lang.reflect.Constructor<T> getConstructor(Class<global::System.Object>[] prm1){return default(global::java.lang.reflect.Constructor<T>);}
        public virtual global::java.lang.reflect.Constructor<T> getDeclaredConstructor(Class<global::System.Object>[] prm1){return default(global::java.lang.reflect.Constructor<T>);}
        public virtual global::java.lang.reflect.Field getDeclaredField(String prm1){return default(global::java.lang.reflect.Field);}
        public virtual global::java.lang.reflect.Method getDeclaredMethod(String prm1, Class<global::System.Object>[] prm2){return default(global::java.lang.reflect.Method);}
        public virtual global::java.lang.reflect.Field getField(String prm1){return default(global::java.lang.reflect.Field);}
        public virtual global::java.lang.reflect.Method getMethod(String prm1, Class<global::System.Object>[] prm2){return default(global::java.lang.reflect.Method);}
        public virtual global::java.net.URL getResource(String prm1){return default(global::java.net.URL);}
        public virtual global::java.io.InputStream getResourceAsStream(String prm1){return default(global::java.io.InputStream);}
        public virtual bool isAnnotationPresent(Class<global::java.lang.annotation.Annotation> prm1){return default(bool);}
        public virtual bool isAssignableFrom(Class<global::System.Object> prm1){return default(bool);}
        public virtual bool isInstance(global::System.Object prm1){return default(bool);}
        public virtual T newInstance(){return default(T);}
        public override String toString(){return default(String);}
        public global::java.lang.annotation.Annotation[]  Annotations { get; private set;}
        public String  CanonicalName { get; private set;}
        public Class<global::System.Object>[]  Classes { get; private set;}
        public ClassLoader  ClassLoader { get; private set;}
        public Class<global::System.Object>  ComponentType { get; private set;}
        public global::java.lang.reflect.Constructor<global::System.Object>[]  Constructors { get; private set;}
        public global::java.lang.annotation.Annotation[]  DeclaredAnnotations { get; private set;}
        public Class<global::System.Object>[]  DeclaredClasses { get; private set;}
        public global::java.lang.reflect.Constructor<global::System.Object>[]  DeclaredConstructors { get; private set;}
        public global::java.lang.reflect.Field[]  DeclaredFields { get; private set;}
        public global::java.lang.reflect.Method[]  DeclaredMethods { get; private set;}
        public Class<global::System.Object>  DeclaringClass { get; private set;}
        public Class<global::System.Object>  EnclosingClass { get; private set;}
        public global::java.lang.reflect.Constructor<global::System.Object>  EnclosingConstructor { get; private set;}
        public global::java.lang.reflect.Method  EnclosingMethod { get; private set;}
        public T[]  EnumConstants { get; private set;}
        public global::java.lang.reflect.Field[]  Fields { get; private set;}
        public global::java.lang.reflect.Type[]  GenericInterfaces { get; private set;}
        public global::java.lang.reflect.Type  GenericSuperclass { get; private set;}
        public Class<global::System.Object>[]  Interfaces { get; private set;}
        public bool  IsAnnotation { get; private set;}
        public bool  IsAnonymousClass { get; private set;}
        public bool  IsArray { get; private set;}
        public bool  IsEnum { get; private set;}
        public bool  IsInterface { get; private set;}
        public bool  IsLocalClass { get; private set;}
        public bool  IsMemberClass { get; private set;}
        public bool  IsPrimitive { get; private set;}
        public bool  IsSynthetic { get; private set;}
        public global::java.lang.reflect.Method[]  Methods { get; private set;}
        public int  Modifiers { get; private set;}
        public String  Name { get; private set;}
        public Package  Package { get; private set;}
        public global::java.security.ProtectionDomain  ProtectionDomain { get; private set;}
        public global::System.Object[]  Signers { get; private set;}
        public String  SimpleName { get; private set;}
        public Class<global::System.Object>  Superclass { get; private set;}
        public global::java.lang.reflect.TypeVariable<Class<T>>[]  TypeParameters { get; private set;}
        global::java.lang.reflect.TypeVariable<global::System.Object>[] global::java.lang.reflect.GenericDeclaration.TypeParameters { get{ return default(global::java.lang.reflect.TypeVariable<global::System.Object>[]); }}
    }
}
