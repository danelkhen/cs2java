//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace java.lang
{
    public partial class Thread : Object, Runnable
    {
        public partial class State : global::java.lang.Enum<global::java.lang.Thread.State>
        {
            public static global::java.lang.Thread.State BLOCKED;
            public static global::java.lang.Thread.State NEW;
            public static global::java.lang.Thread.State RUNNABLE;
            public static global::java.lang.Thread.State TERMINATED;
            public static global::java.lang.Thread.State TIMED_WAITING;
            public static global::java.lang.Thread.State WAITING;
            public State(){}
            public static global::java.lang.Thread.State valueOf(global::java.lang.String prm1){return default(global::java.lang.Thread.State);}
            public static global::java.lang.Thread.State[] values(){return default(global::java.lang.Thread.State[]);}
        }
        public partial interface UncaughtExceptionHandler
        {
            void uncaughtException(global::java.lang.Thread prm1, global::java.lang.Throwable prm2);
        }
        public static int MAX_PRIORITY;
        public static int MIN_PRIORITY;
        public static int NORM_PRIORITY;
        public static int activeCount(){return default(int);}
        public void checkAccess(){}
        protected override global::System.Object clone(){return default(global::System.Object);}
        public virtual int countStackFrames(){return default(int);}
        public static Thread currentThread(){return default(Thread);}
        public virtual void destroy(){}
        public static void dumpStack(){}
        public static int enumerate(Thread[] prm1){return default(int);}
        public static bool holdsLock(global::System.Object prm1){return default(bool);}
        public virtual void interrupt(){}
        public static bool interrupted(){return default(bool);}
        public Thread(String prm1){}
        public Thread(ThreadGroup prm1, Runnable prm2){}
        public Thread(Runnable prm1){}
        public Thread(){}
        public Thread(ThreadGroup prm1, Runnable prm2, String prm3, long prm4){}
        public Thread(ThreadGroup prm1, Runnable prm2, String prm3){}
        public Thread(Runnable prm1, String prm2){}
        public Thread(ThreadGroup prm1, String prm2){}
        public void join(long prm1){}
        public void join(long prm1, int prm2){}
        public void join(){}
        public void resume(){}
        public virtual void run(){}
        public virtual void setContextClassLoader(ClassLoader prm1){}
        public void setDaemon(bool prm1){}
        public static void setDefaultUncaughtExceptionHandler(Thread.UncaughtExceptionHandler prm1){}
        public void setName(String prm1){}
        public void setPriority(int prm1){}
        public virtual void setUncaughtExceptionHandler(Thread.UncaughtExceptionHandler prm1){}
        public static void sleep(long prm1, int prm2){}
        public static void sleep(long prm1){}
        public virtual void start(){}
        public void stop(Throwable prm1){}
        public void stop(){}
        public void suspend(){}
        public override String toString(){return default(String);}
        public static void yield(){}
        public global::java.util.Map<Thread,StackTraceElement[]>  AllStackTraces { get; private set;}
        public ClassLoader  ContextClassLoader { get; set;}
        public Thread.UncaughtExceptionHandler  DefaultUncaughtExceptionHandler { get; set;}
        public long  Id { get; private set;}
        public bool  IsAlive { get; private set;}
        public bool  IsDaemon { get; set;}
        public bool  IsInterrupted { get; private set;}
        public String  Name { get; set;}
        public int  Priority { get; set;}
        public StackTraceElement[]  StackTrace { get; private set;}
        public Thread.State  State2 { get; private set;}
        public ThreadGroup  ThreadGroup { get; private set;}
        public Thread.UncaughtExceptionHandler  UncaughtExceptionHandler2 { get; set;}
    }
}
