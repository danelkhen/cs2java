//***************************************************
//* This file was generated by JSharp
//***************************************************
namespace sun.reflect
{
    public partial interface LangReflectAccess
    {
        global::java.lang.reflect.Constructor<T> copyConstructor<T>(global::java.lang.reflect.Constructor<T> prm1);
        global::java.lang.reflect.Field copyField(global::java.lang.reflect.Field prm1);
        global::java.lang.reflect.Method copyMethod(global::java.lang.reflect.Method prm1);
        ConstructorAccessor getConstructorAccessor(global::java.lang.reflect.Constructor<global::System.Object> prm1);
        byte[] getConstructorAnnotations(global::java.lang.reflect.Constructor<global::System.Object> prm1);
        byte[] getConstructorParameterAnnotations(global::java.lang.reflect.Constructor<global::System.Object> prm1);
        global::java.lang.String getConstructorSignature(global::java.lang.reflect.Constructor<global::System.Object> prm1);
        int getConstructorSlot(global::java.lang.reflect.Constructor<global::System.Object> prm1);
        MethodAccessor getMethodAccessor(global::java.lang.reflect.Method prm1);
        global::java.lang.reflect.Constructor<T> newConstructor<T>(global::java.lang.Class<T> prm1, global::java.lang.Class<global::System.Object>[] prm2, global::java.lang.Class<global::System.Object>[] prm3, int prm4, int prm5, global::java.lang.String prm6, byte[] prm7, byte[] prm8);
        global::java.lang.reflect.Field newField(global::java.lang.Class<global::System.Object> prm1, global::java.lang.String prm2, global::java.lang.Class<global::System.Object> prm3, int prm4, int prm5, global::java.lang.String prm6, byte[] prm7);
        global::java.lang.reflect.Method newMethod(global::java.lang.Class<global::System.Object> prm1, global::java.lang.String prm2, global::java.lang.Class<global::System.Object>[] prm3, global::java.lang.Class<global::System.Object> prm4, global::java.lang.Class<global::System.Object>[] prm5, int prm6, int prm7, global::java.lang.String prm8, byte[] prm9, byte[] prm10, byte[] prm11);
        void setConstructorAccessor(global::java.lang.reflect.Constructor<global::System.Object> prm1, ConstructorAccessor prm2);
        void setMethodAccessor(global::java.lang.reflect.Method prm1, MethodAccessor prm2);
    }
}
